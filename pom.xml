<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.raonigabriel</groupId>
	<artifactId>hello-graal-swing</artifactId>
	<version>0.0.2</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<main.class>com.github.raonigabriel.SwingApp</main.class>
		<graalvm.version>21.2.0</graalvm.version>
		<skip.deb>false</skip.deb>
	</properties>

	<name>spring-qrcode-example</name>
	<description>A simple example to demonstrate that GraalVM can be used to create GUI apps.</description>
	<url>https://github.com/raonigabriel/hello-graal-swing/README.md</url>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
		</license>
	</licenses>

	<scm>
		<url>https://github.com/raonigabriel/hello-graal-swing</url>
	</scm>

	<developers>
		<developer>
			<id>raonigabriel</id>
			<name>Raoni Gabriel</name>
			<timezone>-3</timezone>
			<url>https://github.com/raonigabriel</url>
			<roles>
				<role>Java/Cloud Software Architect</role>
				<role>DevOps Engineer</role>
			</roles>
		</developer>
	</developers>

	<dependencies>
		<dependency>
			<groupId>org.graalvm.sdk</groupId>
			<artifactId>graal-sdk</artifactId>
			<version>${graalvm.version}</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>kr.motd.maven</groupId>
					<artifactId>os-maven-plugin</artifactId>
					<version>1.7.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>3.0.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.1</version>
					<configuration>
						<release>11</release>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.6.0</version>
				</plugin>
				<plugin>
					<artifactId>jdeb</artifactId>
					<groupId>org.vafer</groupId>
					<version>1.8</version>
				</plugin>
				<plugin>
					<groupId>org.graalvm.nativeimage</groupId>
					<artifactId>native-image-maven-plugin</artifactId>
					<version>${graalvm.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<!-- Plugin to detect and normalize OS info -->
			<plugin>
				<groupId>kr.motd.maven</groupId>
				<artifactId>os-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>detect</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Plugin to make sure we are running on Java 11 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-java</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireJavaVersion>
									<version>11</version>
								</requireJavaVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Plugin to pack JAR and make it executable -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>${main.class}</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>active-on-linux</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>
			<properties>
				<skip.deb>false</skip.deb>
			</properties>
		</profile>

		<profile>
			<id>native</id>
			<build>
				<plugins>
					<!-- Plugin to copy OS dependant resources -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-native-image-meta-inf</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/target/classes/META-INF</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/resources/${os.detected.name}/META-INF</directory>
											<filtering>false</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-deb-control</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<skip>${skip.deb}</skip>
									<outputDirectory>${basedir}/target/classes</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/resources/${os.detected.name}/deb/control</directory>
											<filtering>true</filtering>
											<targetPath>${project.build.directory}/control</targetPath>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- This plugin will create the actual native Linux binary. -->
					<plugin>
						<groupId>org.graalvm.nativeimage</groupId>
						<artifactId>native-image-maven-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>native-image</goal>
								</goals>
								<phase>package</phase>
							</execution>
						</executions>
						<configuration>
							<mainClass>${main.class}</mainClass>
							<imageName>${project.artifactId}</imageName>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<!-- Then we strip (remove symbols) the binary -->
							<execution>
								<id>strip-binary</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<skip>${skip.deb}</skip>
									<executable>strip</executable>
									<workingDirectory>${project.build.directory}</workingDirectory>
									<arguments>
										<argument>${project.artifactId}</argument>
									</arguments>
								</configuration>
							</execution>

						</executions>
					</plugin>
					<!-- Finally, we will generate a deb package with the native binary -->
					<plugin>
						<artifactId>jdeb</artifactId>
						<groupId>org.vafer</groupId>
						<executions>
							<execution>
								<id>build-deb</id>
								<phase>package</phase>
								<goals>
									<goal>jdeb</goal>
								</goals>
								<configuration>
									<skip>${skip.deb}</skip>
									<compression>bzip2</compression>
									<controlDir>${project.build.directory}/control</controlDir>
									<deb>[[buildDir]]/[[artifactId]]_[[version]]_amd64.[[extension]]</deb>
									<dataSet>
										<data>
											<src>${project.build.directory}/${project.artifactId}</src>
											<type>file</type>
											<mapper>
												<type>perm</type>
												<prefix>/usr/bin</prefix>
												<filemode>755</filemode>
											</mapper>
										</data>
									</dataSet>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>trace</id>
			<build>
				<plugins>
					<!-- Plugin generate OS specific native-image tracing info -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>execute-with-native-image-agent</id>
								<goals>
									<goal>exec</goal>
								</goals>
								<phase>integration-test</phase>
							</execution>
						</executions>
						<configuration>
							<executable>${env.GRAALVM_HOME}/bin/java</executable>
							<arguments>
								<argument>-agentlib:native-image-agent=config-output-dir=${basedir}/src/main/resources/${os.detected.name}/META-INF/native-image/${project.groupId}/${project.artifactId}</argument>
								<argument>-jar</argument>
								<argument>${project.build.directory}/${project.build.finalName}.jar</argument>
							</arguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

</project>
